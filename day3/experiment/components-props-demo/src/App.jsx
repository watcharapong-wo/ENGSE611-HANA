import React, { useState } from 'react';
import ErrorBoundary from './components/AdvancedComponents/ErrorBoundary';
import WelcomeCard from './components/BasicComponents/WelcomeCard';
import ProductCard from './components/BasicComponents/ProductCard';
import UserStatus from './components/BasicComponents/UserStatus';
import Card from './components/AdvancedComponents/Card';
import StudentList from './components/AdvancedComponents/StudentList';
import withLoading from './components/HOC/withLoading';
import { sampleProducts, sampleStudents, sampleUsers } from './data/mockData';

function App() {
    // Demo Controls State
    const [showLoadingDemo, setShowLoadingDemo] = useState(false);
    const [studentGroupBy, setStudentGroupBy] = useState('grade');
    const [showStudentStats, setShowStudentStats] = useState(true);
    const [showErrorDemo, setShowErrorDemo] = useState(false);
    
    // Event Handlers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo
    const handleAddToCart = (product) => {
        alert(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° "${product.name}" ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!\nüí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø${product.price.toLocaleString()}`);
    };
    
    const handleViewDetails = (product) => {
        const details = `
üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

üìù ‡∏ä‡∏∑‡πà‡∏≠: ${product.name}
üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø${product.price.toLocaleString()}
üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${product.inStock ? '‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' : '‡∏´‡∏°‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}
üìñ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${product.description}
        `.trim();
        alert(details);
    };
    
    const handleStudentClick = (student) => {
        alert(`üë®‚Äçüéì ${student.name}\nüìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${student.score}\nüéì ‡πÄ‡∏Å‡∏£‡∏î: ${student.grade}\nüìö ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà: ${student.year}`);
    };
    
    // Enhanced Components with HOC
    const ProductCardWithLoading = withLoading(ProductCard);
    const StudentListWithLoading = withLoading(StudentList);
    
    // Error Throwing Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Boundary
    const ErrorThrowingComponent = () => {
        if (showErrorDemo) {
            throw new Error('‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Boundary - Component ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤!');
        }
        return <p>‚úÖ Component ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</p>;
    };
    
    return (
        <div className="demo-container">
            {/* Header */}
            <h1>üìö Demo: Components ‡πÅ‡∏•‡∏∞ Props</h1>
            <p className="demo-description">
                ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô React Components ‡πÅ‡∏•‡∏∞ Props ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 2
            </p>
            
            {/* Navigation */}
            <div className="demo-nav">
                <h3>üß≠ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï</h3>
                <div className="nav-links">
                    <a href="#basic-props" className="nav-link">Basic Props</a>
                    <a href="#complex-props" className="nav-link">Complex Props</a>
                    <a href="#children" className="nav-link">Children Props</a>
                    <a href="#conditional" className="nav-link">Conditional Rendering</a>
                    <a href="#lists" className="nav-link">List Rendering</a>
                    <a href="#error-boundary" className="nav-link">Error Boundary</a>
                    <a href="#hoc" className="nav-link">HOC</a>
                </div>
            </div>
            
            {/* Section 1: Basic Props ‡πÅ‡∏•‡∏∞ Default Props */}
            <section id="basic-props" className="demo-section">
                <h2>1. Basic Props ‡πÅ‡∏•‡∏∞ Default Props</h2>
                <div className="demo-grid">
                    <WelcomeCard 
                        name="‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ" 
                        age={25} 
                        role="Senior Developer" 
                        isVIP={true}
                    />
                    <WelcomeCard 
                        name="‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°" 
                        age={23} 
                        role="UI/UX Designer"
                        // isVIP ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ default value = false
                    />
                    <WelcomeCard 
                        name="‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å" 
                        age={28} 
                        role="Project Manager" 
                        isVIP={false}
                        avatar="https://via.placeholder.com/60x60/28a745/ffffff?text=SM"
                    />
                </div>
                
                <Card title="üí° ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Basic Props" variant="primary">
                    <ul className="feature-list">
                        <li>Props ‡πÄ‡∏õ‡πá‡∏ô parameters ‡∏Ç‡∏≠‡∏á Component</li>
                        <li>‡πÉ‡∏ä‡πâ Default Parameters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</li>
                        <li>Destructuring ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô</li>
                        <li>PropTypes ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>
                    </ul>
                </Card>
            </section>
            
            {/* Section 2: Complex Props ‡πÅ‡∏•‡∏∞ PropTypes */}
            <section id="complex-props" className="demo-section">
                <h2>2. Complex Props ‡πÅ‡∏•‡∏∞ PropTypes Validation</h2>
                <div className="demo-grid">
                    {sampleProducts.slice(0, 2).map(product => (
                        <ProductCard
                            key={product.id}
                            product={product}
                            onAddToCart={handleAddToCart}
                            onViewDetails={handleViewDetails}
                            showDiscount={true}
                            showStock={true}
                        />
                    ))}
                </div>
                
                <Card title="üîç PropTypes Validation" variant="warning">
                    <p>‡πÄ‡∏õ‡∏¥‡∏î Console (F12) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π PropTypes warnings ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á props ‡∏ú‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</p>
                    <div className="code-block">
{`ProductCard.propTypes = {
  product: PropTypes.shape({
    id: PropTypes.number.isRequired,
    name: PropTypes.string.isRequired,
    price: PropTypes.number.isRequired,
    // ...
  }).isRequired,
  onAddToCart: PropTypes.func.isRequired,
  showDiscount: PropTypes.bool
};`}
                    </div>
                </Card>
            </section>
            
            {/* Section 3: Children Props ‡πÅ‡∏•‡∏∞ Composition */}
            <section id="children" className="demo-section">
                <h2>3. Children Props ‡πÅ‡∏•‡∏∞ Component Composition</h2>
                <div className="demo-grid">
                    <Card title="üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß" variant="success">
                        <p><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ</p>
                        <p><strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> somchai@email.com</p>
                        <p><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå:</strong> 081-234-5678</p>
                        <button className="btn-primary">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
                    </Card>
                    
                    <Card variant="warning">
                        <Card.Header>
                            <Card.Title level={4}>‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</Card.Title>
                        </Card.Header>
                        <Card.Body>
                            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á</p>
                            <ul>
                                <li>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</li>
                                <li>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</li>
                                <li>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•</li>
                            </ul>
                        </Card.Body>
                        <Card.Footer>
                            <small>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</small>
                        </Card.Footer>
                    </Card>
                </div>
                
                <Card title="üß© Compound Components Pattern" variant="primary">
                    <p>Pattern ‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á flexible API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö complex components</p>
                    <div className="code-block">
{`<Card variant="warning">
  <Card.Header>
    <Card.Title level={4}>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</Card.Title>
  </Card.Header>
  <Card.Body>
    <p>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤...</p>
  </Card.Body>
  <Card.Footer>
    <small>‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πå‡∏î</small>
  </Card.Footer>
</Card>`}
                    </div>
                </Card>
            </section>
            
            {/* Section 4: Conditional Rendering */}
            <section id="conditional" className="demo-section">
                <h2>4. Conditional Rendering</h2>
                <div className="demo-grid">
                    {sampleUsers.map((user, index) => (
                        <Card key={index} title={`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${index + 1}`}>
                            <UserStatus user={user} showDetails={true} />
                            {user && (
                                <div style={{ marginTop: '10px', fontSize: '14px', color: '#666' }}>
                                    <p>‡∏ä‡∏∑‡πà‡∏≠: {user.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                            )}
                        </Card>
                    ))}
                </div>
                
                <Card title="üé≠ Conditional Rendering Patterns" variant="secondary">
                    <div className="demo-grid single-column">
                        <div>
                            <h4>1. && Operator (Short Circuit)</h4>
                            <div className="code-block">
{`{user && <UserProfile user={user} />}
{isLoading && <LoadingSpinner />}`}
                            </div>
                        </div>
                        
                        <div>
                            <h4>2. Ternary Operator</h4>
                            <div className="code-block">
{`{user ? (
  <WelcomeMessage user={user} />
) : (
  <LoginForm />
)}`}
                            </div>
                        </div>
                        
                        <div>
                            <h4>3. Early Return</h4>
                            <div className="code-block">
{`if (!user) {
  return <div>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</div>;
}
return <UserProfile user={user} />;`}
                            </div>
                        </div>
                    </div>
                </Card>
            </section>
            
            {/* Section 5: List Rendering ‡πÅ‡∏•‡∏∞ Keys */}
            <section id="lists" className="demo-section">
                <h2>5. List Rendering ‡πÅ‡∏•‡∏∞ Keys</h2>
                
                <div className="demo-controls">
                    <label>‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°:</label>
                    <select 
                        value={studentGroupBy}
                        onChange={(e) => setStudentGroupBy(e.target.value)}
                    >
                        <option value="grade">‡πÄ‡∏Å‡∏£‡∏î</option>
                        <option value="year">‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ</option>
                    </select>
                    
                    <label>
                        <input 
                            type="checkbox"
                            checked={showStudentStats}
                            onChange={(e) => setShowStudentStats(e.target.checked)}
                        />
                        ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                    </label>
                </div>
                
                <StudentList 
                    students={sampleStudents}
                    onStudentClick={handleStudentClick}
                    groupBy={studentGroupBy}
                    showStats={showStudentStats}
                />
                
                <Card title="üîë ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Keys" variant="danger">
                    <div className="warning-box">
                        <h4>‚ö†Ô∏è ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ Array Index ‡πÄ‡∏õ‡πá‡∏ô Key!</h4>
                        <p>‡∏´‡∏≤‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ React render ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</p>
                    </div>
                    <div className="code-block">
{`// ‚ùå ‡πÑ‡∏°‡πà‡∏î‡∏µ
{items.map((item, index) => 
  <Item key={index} data={item} />
)}

// ‚úÖ ‡∏î‡∏µ  
{items.map(item => 
  <Item key={item.id} data={item} />
)}`}
                    </div>
                </Card>
            </section>
            
            {/* Section 6: Error Boundary */}
            <section id="error-boundary" className="demo-section">
                <h2>6. Error Boundaries</h2>
                
                <div className="demo-controls">
                    <button 
                        onClick={() => setShowErrorDemo(!showErrorDemo)}
                        className={showErrorDemo ? "btn-danger" : "btn-primary"}
                    >
                        {showErrorDemo ? 'üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Error' : 'üí• ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î Error'}
                    </button>
                </div>
                
                <div className="demo-grid">
                    <Card title="Error Boundary Test" variant="danger">
                        <ErrorBoundary showDetails={true}>
                            <ErrorThrowingComponent />
                            <p>Component ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥</p>
                        </ErrorBoundary>
                    </Card>
                    
                    <Card title="Normal Component" variant="success">
                        <p>‚úÖ Component ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å Error</p>
                        <p>Error Boundary ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏±‡∏á</p>
                    </Card>
                </div>
                
                <Card title="üõ°Ô∏è Error Boundary Best Practices" variant="warning">
                    <ul className="feature-list">
                        <li>‡πÉ‡∏ä‡πâ Class Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Error Boundary</li>
                        <li>‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á Error Boundary ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</li>
                        <li>‡∏™‡∏£‡πâ‡∏≤‡∏á Fallback UI ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</li>
                        <li>Log errors ‡πÑ‡∏õ‡∏¢‡∏±‡∏á monitoring service</li>
                    </ul>
                </Card>
            </section>
            
            {/* Section 7: Higher-Order Components (HOC) */}
            <section id="hoc" className="demo-section">
                <h2>7. Higher-Order Components (HOC)</h2>
                
                <div className="demo-controls">
                    <button 
                        onClick={() => setShowLoadingDemo(!showLoadingDemo)}
                        className="btn-primary"
                    >
                        {showLoadingDemo ? '‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß' : '‚è≥ ‡πÅ‡∏™‡∏î‡∏á Loading'}
                    </button>
                </div>
                
                <div className="demo-grid">
                    <ProductCardWithLoading
                        product={sampleProducts[0]}
                        onAddToCart={handleAddToCart}
                        onViewDetails={handleViewDetails}
                        isLoading={showLoadingDemo}
                        loadingText="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
                    />
                    
                    <StudentListWithLoading
                        students={sampleStudents.slice(0, 3)}
                        onStudentClick={handleStudentClick}
                        isLoading={showLoadingDemo}
                        loadingText="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠..."
                        showStats={false}
                    />
                </div>
                
                <Card title="üîß HOC Pattern" variant="primary">
                    <p>HOC ‡πÄ‡∏õ‡πá‡∏ô function ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö Component ‡πÅ‡∏•‡∏∞ return Component ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
                    <div className="code-block">
{`function withLoading(WrappedComponent) {
  return function WithLoadingComponent({ isLoading, ...props }) {
    if (isLoading) {
      return <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
    }
    return <WrappedComponent {...props} />;
  };
}

// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
const ProductCardWithLoading = withLoading(ProductCard);`}
                    </div>
                </Card>
            </section>
            
            {/* Section 8: Props Validation Summary */}
            <section className="demo-section">
                <h2>8. ‡∏™‡∏£‡∏∏‡∏õ Props Validation ‡πÅ‡∏•‡∏∞ Best Practices</h2>
                
                <div className="demo-grid two-columns">
                    <Card title="‚úÖ Do's - ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥" variant="success">
                        <ul className="feature-list">
                            <li>‡πÉ‡∏ä‡πâ PropTypes validation ‡πÄ‡∏™‡∏°‡∏≠</li>
                            <li>‡∏ï‡∏±‡πâ‡∏á Default Props ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</li>
                            <li>‡πÉ‡∏ä‡πâ Destructuring ‡πÉ‡∏ô parameters</li>
                            <li>‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Props ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢</li>
                            <li>‡πÅ‡∏¢‡∏Å Props ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (data, callbacks, config)</li>
                        </ul>
                    </Card>
                    
                    <Card title="‚ùå Don'ts - ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥" variant="danger">
                        <ul className="feature-list">
                            <li>‡∏™‡πà‡∏á Props ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Object)</li>
                            <li>‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Props ‡πÅ‡∏ö‡∏ö generic ‡πÄ‡∏ä‡πà‡∏ô data, info</li>
                            <li>‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà key ‡πÉ‡∏ô list rendering</li>
                            <li>‡πÉ‡∏ä‡πâ array index ‡πÄ‡∏õ‡πá‡∏ô key</li>
                            <li>‡πÑ‡∏°‡πà validate Props ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö public components</li>
                        </ul>
                    </Card>
                </div>
                
                <Card title="üìã PropTypes Reference" variant="secondary">
                    <div className="code-block">
{`// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
PropTypes.string          // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
PropTypes.number          // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
PropTypes.bool            // true/false
PropTypes.array           // ‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå
PropTypes.object          // ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
PropTypes.func            // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
PropTypes.string.isRequired

// ‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞
PropTypes.arrayOf(PropTypes.number)

// ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞  
PropTypes.shape({
  name: PropTypes.string.isRequired,
  age: PropTypes.number
})

// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
PropTypes.oneOf(['small', 'medium', 'large'])

// ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
PropTypes.oneOfType([
  PropTypes.string,
  PropTypes.number
])`}
                    </div>
                </Card>
            </section>
            
            {/* Footer */}
            <div className="demo-footer">
                <h3>üéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï Components ‡πÅ‡∏•‡∏∞ Props</h3>
                <p>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô React Components ‡πÅ‡∏•‡∏∞ Props ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á</p>
                <p>‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à concept ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≤‡∏á‡πÜ</p>
                
                <div className="tech-badges">
                    <span className="tech-badge">React.js</span>
                    <span className="tech-badge">PropTypes</span>
                    <span className="tech-badge">JSX</span>
                    <span className="tech-badge">Error Boundaries</span>
                    <span className="tech-badge">HOC Pattern</span>
                    <span className="tech-badge">Compound Components</span>
                </div>
                
                <div style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>
                    <p>üìö ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Components ‡πÅ‡∏•‡∏∞ Props</p>
                    <p>üéØ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô React.js</p>
                </div>
            </div>
        </div>
    );
}

export default App;